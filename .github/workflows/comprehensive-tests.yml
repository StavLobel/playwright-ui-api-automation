name: Comprehensive Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - ui-only
          - api-only
          - quality-only

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  # Ensure GITHUB_TOKEN has write permissions for Pages deployment
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Code Quality Checks
        shell: bash
        run: |
          python -m black src tests
          python -m isort src tests
          python -m flake8 src tests
          python -m mypy src tests

  ui-tests:
    name: UI Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        run: |
          playwright install --with-deps
          playwright install ${{ matrix.browser }}

      - name: Install Allure CLI
        run: npm install -g allure-commandline

      - name: Run UI Tests
        run: |
          python -m pytest tests/ui/ -m ui --browser ${{ matrix.browser }} --alluredir=allure-results-ui-${{ matrix.browser }} --html=ui-test-report-${{ matrix.browser }}.html --self-contained-html

      - name: Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results-${{ matrix.browser }}
          path: |
            allure-results-ui-${{ matrix.browser }}/
            ui-test-report-${{ matrix.browser }}.html

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        run: |
          playwright install --with-deps

      - name: Install Allure CLI
        run: npm install -g allure-commandline

      - name: Run API Tests
        run: |
          python -m pytest tests/api/ -m api --alluredir=allure-results-api --html=api-test-report.html --self-contained-html

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            allure-results-api/
            api-test-report.html

  generate-reports:
    name: Generate & Publish Reports
    runs-on: ubuntu-latest
    needs: [ui-tests, api-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Install Allure CLI
        run: npm install -g allure-commandline

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: '*-test-results*'

      - name: Download all Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: 'allure-results-*'

      - name: Generate Combined Allure Report
        run: |
          # Create combined results directory
          mkdir -p combined-allure-results

          # Copy results from all test types
          for dir in allure-results-*; do
            if [ -d "$dir" ]; then
              cp -r "$dir"/* combined-allure-results/ || true
            fi
          done

          # Generate combined report
          allure generate combined-allure-results -o combined-allure-report --clean

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: combined-allure-report
          keep_files: true
          force_orphan: false

  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [ui-tests, api-tests, generate-reports]
    if: always()

    steps:
      - name: Notify Comprehensive Test Results
        uses: actions/github-script@v7
        with:
          script: |
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            const uiTestJobs = jobs.jobs.filter(job => job.name.includes('UI Tests'));
            const apiTestJob = jobs.jobs.find(job => job.name === 'API Tests');
            const qualityJob = jobs.jobs.find(job => job.name === 'Code Quality Checks');

            const uiSuccessCount = uiTestJobs.filter(job => job.conclusion === 'success').length;
            const uiTotalCount = uiTestJobs.length;
            const apiStatus = apiTestJob?.conclusion === 'success' ? '✅' : '❌';
            const qualityStatus = qualityJob?.conclusion === 'success' ? '✅' : '❌';

            const summary = `## 🚀 Comprehensive Test Execution Summary

            **Overall Status**: ${uiSuccessCount === uiTotalCount && apiTestJob?.conclusion === 'success' && qualityJob?.conclusion === 'success' ? '✅ All tests passed' : '❌ Some tests failed'}

            **Quality Checks**: ${qualityStatus} ${qualityJob?.conclusion === 'success' ? 'Passed' : 'Failed'}

            **UI Tests** (${uiSuccessCount}/${uiTotalCount} browsers):
            ${uiTestJobs.map(job => {
              const browser = job.name.match(/UI Tests \((.+)\)/)?.[1] || 'Unknown';
              const status = job.conclusion === 'success' ? '✅' : '❌';
              return `- ${status} ${browser}`;
            }).join('\n')}

            **API Tests**: ${apiStatus} ${apiTestJob?.conclusion === 'success' ? 'Passed' : 'Failed'}

            **Reports**:
            - 🌐 **Allure Report**: https://${context.repo.owner}.github.io/${context.repo.repo}/
            - 📊 **Test Artifacts**: Available in workflow artifacts

            **Coverage**: Complete UI and API test validation across all supported browsers`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue?.number || 0,
              body: summary
            });
